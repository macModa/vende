rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can only access their own user document
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Allow users to read their own profile data
      allow get: if request.auth != null && request.auth.uid == userId;
      
      // Validate user data structure on write
      allow create, update: if request.auth != null 
        && request.auth.uid == userId
        && validateUserData(request.resource.data);
    }
    
    // Products collection - read-only for authenticated users
    match /products/{productId} {
      allow read: if request.auth != null;
      
      // Only admins can write products
      allow write: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Categories collection - read-only for authenticated users
    match /categories/{categoryId} {
      allow read: if request.auth != null;
      
      // Only admins can write categories
      allow write: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Orders collection - users can only access their own orders
    match /orders/{orderId} {
      allow read, write: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId &&
        validateOrderData(request.resource.data);
    }
    
    // Cart collection - users can only access their own cart
    match /carts/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Validate cart data structure
      allow create, update: if request.auth != null && 
        request.auth.uid == userId &&
        validateCartData(request.resource.data);
    }
    
    // Reviews collection - authenticated users can read all, write their own
    match /reviews/{reviewId} {
      allow read: if request.auth != null;
      
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId &&
        validateReviewData(request.resource.data);
      
      allow update, delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
  
  // Validation functions
  function validateUserData(data) {
    return data.keys().hasAll(['email', 'displayName', 'createdAt']) &&
           data.email is string &&
           data.displayName is string &&
           data.createdAt is timestamp;
  }
  
  function validateOrderData(data) {
    return data.keys().hasAll(['userId', 'items', 'total', 'status', 'createdAt']) &&
           data.userId is string &&
           data.items is list &&
           data.total is number &&
           data.status is string &&
           data.createdAt is timestamp &&
           data.total >= 0;
  }
  
  function validateCartData(data) {
    return data.keys().hasAll(['items', 'updatedAt']) &&
           data.items is list &&
           data.updatedAt is timestamp;
  }
  
  function validateReviewData(data) {
    return data.keys().hasAll(['userId', 'productId', 'rating', 'comment', 'createdAt']) &&
           data.userId is string &&
           data.productId is string &&
           data.rating is number &&
           data.rating >= 1 && data.rating <= 5 &&
           data.comment is string &&
           data.createdAt is timestamp;
  }
}
